#!/bin/bash

### 依赖：系统中安装jq ###

### 环境 ###
env_test="192.168.177.88"

auth_token="K1AwANjwaBmIWZBBHadr6oLC3AEIAkAtqhAJofH+ZZw="
auth_token_pin="64c8ddb08ad83c7b04fba541c3b085fd"

### 等待时间 ###
wait_time_long="5"
wait_time_short="3"

### ACL服务器 ###
env_test_ap_1="192.168.177.89"
env_test_ap_2="192.168.169.51"

### 创建缓存云实例 ###
echo "[STEP] 创建缓存云实例"
test_cases="curl -s -H\"auth-Token:${auth_token}\" -H\"Content-Type:application/json\" -XPOST --data '{\"spaceName\":\"\",\"spaceType\":1,\"zoneId\":1,\"capacity\":2097152,\"quantity\":1,\"remarks\":\"\"}' http://${env_test}/v1.0/${auth_token_pin}/clusters"
echo "${test_cases}"
result=`eval ${test_cases}`
echo "[RESULT] ${result}"
echo ""

### 根据code判断缓存云是否创建成功: code=1创建成功,code=0创建失败 ###
code=`echo ${result} | jq .code`
#echo "code=${code}"
#echo ""

if [ ${code} == "null" ] || [ ${code} -ne 1 ];then
	msg=`echo ${result} | jq .msg`
	echo "[ERROR]【缓存云实例创建失败】: ${msg}"
	echo ""
	exit 0
fi

### 缓存云创建成功后，attach为创建的对应的space_id ###
space_id=`echo ${result} | jq .attach`
echo "[INFO] 实例space_id=${space_id}被创建"
echo ""

sleep ${wait_time_long}

### 根据space_id查找对应的缓存云实例 ###
echo "[STEP] 根据space_id=${space_id}查找对应的缓存云实例"
test_cases="curl -s -H\"auth-Token:${auth_token}\" -XGET http://${env_test}/v1.0/${auth_token_pin}/clusters/${space_id}"
echo "${test_cases}"
result=`eval ${test_cases}`
echo "[RESULT] ${result}"
echo ""

### 查询是否成功 ###
code=`echo ${result} | jq .code`
#echo "code=${code}"
#echo ""

if [ ${code} == "null" ] || [ ${code} != "1" ];then
        msg=`echo ${result} | jq .msg`
        echo "[ERROR]【根据space_id查询缓存云实例错误】: ${msg}"
	echo ""
        exit 0
fi

sleep ${wait_time_short}

### 根据space_id查询缓存云实例的创建状态：status=100创建成功，status=500创建失败 ###
result=`eval ${test_cases}`
status=`echo ${result} | jq .attach.status`
#echo "status=${status}"
#echo ""

if [ ${status} == "null" ];then
	echo "[ERROR] 缓存云实例space_id=${space_id}创建失败"
	echo ""
	exit 0
fi

while [[ 1 -eq 1 ]];do
	result=`eval ${test_cases}`
	status=`echo ${result} | jq .attach.status`
	#echo "${status}"
	if [ ${status} == "100" ];then
		echo ""
		echo "[INFO] ${space_id}创建成功"
		echo ""
		break
	fi
	if [ ${status} == "500" ];then
		echo ""
		echo "[ERROR] ${space_id}创建失败"
		echo ""
		break
	fi
	if [ ${status} == "0" ];then
		echo "[INFO] ${space_id}创建中..."
	fi

	sleep ${wait_time_long}
done

sleep ${wait_time_long}

### Mysql数据库信息 ###
MYSQL_HOSTNAME="192.168.177.87"
MYSQL_PORT="3306"
MYSQL_USERNAME="tester"
MYSQL_PASSWORD="123456"
MYSQL_DBNAME="jimdb"
MYSQL_TABLENAME_TOPOLOGY="topology"

### 获取本机IP地址 ###
local_host_ip=`/sbin/ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2}'|tr -d \"addr:\"`
echo "[INFO] 本机IP，local_host_ip=${local_host_ip}"
echo ""

### 查询topology ###
sql_select_topology=`mysql -h192.168.177.87 -utester -p123456 << EOF
        use jimdb;
        select current_topology from topology where space_id=${space_id};
EOF`

### shard id ##
result_shardId=`echo "${sql_select_topology}" | awk '{if(NR == 2) print}' | jq .shards[0].shardId`
echo "[INFO] shardId=${result_shardId}"
echo ""

### master ip & port ###
result_master_ip=`echo "${sql_select_topology}" | awk '{if(NR == 2) print}' | jq .shards[0].master.ip`
echo "[INFO] master_ip=${result_master_ip}"
echo ""

result_master_port=`echo "${sql_select_topology}" | awk '{if(NR == 2) print}' | jq .shards[0].master.port`
echo "[INFO] master_port=${result_master_port}"
echo ""

### slave ip & port ###
result_slave_ip=`echo "${sql_select_topology}" | awk '{if(NR == 2) print}' | jq .shards[0].master.slaves[0].ip`
echo "[INFO] slave_ip=${result_slave_ip}"
echo ""

result_slave_port=`echo "${sql_select_topology}" | awk '{if(NR == 2) print}' | jq .shards[0].master.slaves[0].port`
echo "[INFO] slave_port=${result_slave_port}"
echo ""

### 设置ACL访问列表 ###
echo "[STEP] 设置ACL访问列表"
test_cases="curl -s -H\"auth-Token:${auth_token}\" -H\"Content-Type:application/json\" -XPUT --data '{\"target\":[${space_id}],\"ips\":[\"${local_host_ip}\", ${result_master_ip},${result_slave_ip}],\"action\":\"allow\"}' http://${env_test}/v1.0/${auth_token_pin}/acl"
echo "${test_cases}"
result=`eval ${test_cases}`
echo "[RESULT] ${result}"
echo ""

sleep ${wait_time_long}

### 查看ACL设置 ###
echo "[STEP] 查看ACL设置"
test_cases="curl -s -H\"auth-Token:${auth_token}\" -XGET http://${env_test}/v1.0/${auth_token_pin}/acl/${space_id}"
echo "${test_cases}"
result=`eval ${test_cases}`
echo "[RESULT] ${result}"
echo ""

sleep ${wait_time_long}

### 删除缓存云实例 ###
echo "[STEP] 删除缓存云实例space_id=${space_id}"
test_cases="curl -s -H\"auth-Token:${auth_token}\" -XDELETE http://${env_test}/v1.0/${auth_token_pin}/clusters/${space_id}"
echo "${test_cases}"
result=`eval ${test_cases}`
echo "[RESULT] ${result}"
echo ""

sleep ${wait_time_long}

### 查询刚被删除的缓存云实例 ###
echo "[STEP] 根据space_id=${space_id}查找对应的缓存云实例"
test_cases="curl -s -H\"auth-Token:${auth_token}\" -XGET http://${env_test}/v1.0/${auth_token_pin}/clusters/${space_id}"
echo "${test_cases}"
result=`eval ${test_cases}`
echo "[INFO] ${result}"
echo ""

### 查询是否成功 ###
code=`echo ${result} | jq .code`
#echo "code=${code}"
#echo ""

if [ ${code} == "null" ] || [ ${code} != "1" ];then
        msg=`echo ${result} | jq .msg`
        echo "[ERROR]【根据space_id查询缓存云实例错误】: ${msg}"
	echo ""
        exit 0
fi

status=`echo ${result} | jq .attach.status`
#echo "status=${status}"
#echo ""

if [ ${status} == "null" ];then
        echo "[INFO] space_id=${space_id}该实例已被删除"
        echo ""
        exit 0
fi

while [[ 1 -eq 1 ]];do
        result=`eval ${test_cases}`
        #attach=`echo ${result} | jq .attach`
        #if [ ! -n ${attach} ];then
	#	echo ""
        #        echo "[INFO] 删除成功"
	#	 echo ""
        #        break
        #fi
        status=`echo ${result} | jq .attach.status`
        if [ ${status} == "null" ];then
		echo ""
                echo "[INFO] ${space_id}删除成功"
		echo ""
                break
        fi
        if [ ${status} == "601" ];then
		echo ""
                echo "[INFO] ${space_id}删除成功"
		echo ""
                break
        fi
        if [ ${status} == "600" ];then
                echo "[INFO] ${space_id}删除中..."
        fi
        sleep ${wait_time_long}
done
echo ""

